[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = ""
authors = ["Evrone <mail@evrone.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12"
djangorestframework = "^3.15.1"
Django = "^5.0.4"
environs = "^11.0.0"
gunicorn = "^21.2.0"
psycopg = { extras = ["binary", "pool"], version = "^3.1.18" }
uritemplate = "^3.0.1"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-django = "^4.8.0"

[tool.poetry.dev-dependencies]
pre-commit = "^3.7.0"
django-stubs = "^4.2.7"
{%- if cookiecutter.linter == 'Flake8' %}
isort = "^5.13.2"
black = "^24.3.0"
flake8 = "^7.0.0"
flake8-bandit = "^4.1.1"
flake8-broken-line = "^1.0.0"
flake8-comprehensions = "^3.14.0"
flake8-debugger = "^4.1.2"
flake8-eradicate = "^1.5.0"
flake8-isort = "^6.1.1"
flake8-quotes = "^3.4.0"
flake8-pyproject = "^1.2.3"
flake8-bugbear = "^24.2.6"
flake8-rst-docstrings = "^0.3.0"
{%- elif cookiecutter.linter == 'Ruff' %}
ruff = "^0.5.7"
{%- endif %}
pip-audit="^2.7.3"
mypy = "^1.9.0"
pylint = "^3.1.0"
pylint-django = "^2.5.4"
pytest-randomly = "^3.15.0"
faker = "^28.4.1"
factory-boy = "^3.3.1"

{%- if cookiecutter.linter == 'Flake8' %}

[tool.black]
line-length = 100
target-version = ['py312']
exclude = '''
(
  \.eggs
  |\.git
  |\.hg
  |\.mypy_cache
  |\.nox
  |\.tox
  |\.venv
  |_build
  |buck-out
  |build
  |dist
)
'''

[tool.isort]
line_length = 100
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
known_django = "django"
profile = "django"
src_paths = "app"
lines_after_imports = 2
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "**/admin.py",
    "**/admin/**",
    "**/tests/**",
    "**/migrations/**",
    "**/management/**",
    "**/urls.py",
    "**/__init__/**",
    "**/settings/**",
    "manage.py",
    "asgi.py",
    "wsgi.py",
]

[tool.mypy]
plugins = "mypy_django_plugin.main"

[tool.django-stubs]
django_settings_module = "app.settings.base"

{%- if cookiecutter.linter == 'Flake8' %}

[tool.flake8]
ignore = [
    "E701", # Multiple statements on one line (colon)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D401", # First line should be in imperative mood
    "P103", # other string does contain unindexed parameters
    "W291", # trailing whitespace
    "W503", # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "**/tests/*",
    "**/migrations/*",
    "**/settings/*",
    "snapshots",
]
max-imports = 20
max-import-from-members = 10
max-expressions = 12
max-methods = 10
max-module-members = 20
max-try-body-length = 10
max-cognitive-average = 10
max-cognitive-score = 30
max-annotation-complexity = 4
max-line-complexity = 15
max-complexity = 15
max-name-length = 60
max-line-length = 100
count = true
{%- elif cookiecutter.linter == 'Ruff' %}

[tool.ruff]
src = ["{{cookiecutter.project_name}}"]
line-length = 99
unsafe-fixes = true
extend-exclude = [
    "docs/*",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812", # Trailing comma missing
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "N818", # Exception name should be named with Error suffix
    "PT004", # Deprecated error, will be removed in future release
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
    "S106", # Possible hardcoded password assigned to argument
]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 12
max-public-methods = 10
max-locals = 16

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
{%- endif %}

[tool.pylint.main]
ignore = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "tests",
    "migrations",
    "settings",
    "snapshots",
]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "unused-argument",
    "redefined-builtin",
    "import-outside-toplevel",
    "no-else-return",
    "unsubscriptable-object",
    "abstract-method",
]

[tool.pylint.master]
load-plugins=[
    "pylint_django",
    "pylint.extensions.for_any_all",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.mccabe",
]
django-settings-module = "app.settings.base"

[tool.pylint.basic]
good-names = ["i", "j", "k", "v", "ex", "pk", "r", "_"]

[tool.pylint.design]
max-args = 12
max-locals = 16
max-attributes = 30
max-parents = 20
min-public-methods = 0
max-public-methods = 10
max-branches = 15
max-statements = 50
max-bool-expr = 10
max-returns = 10

[tool.pylint.format]
max-module-lines = 500
