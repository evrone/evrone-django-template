[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = ""
authors = ["Evrone <mail@evrone.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12"
djangorestframework = "^3.15.1"
Django = "^5.0.4"
environs = "^11.0.0"
gunicorn = "^21.2.0"
psycopg = { extras = ["binary", "pool"], version = "^3.1.18" }
uritemplate = "^3.0.1"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-django = "^4.8.0"

[tool.poetry.dev-dependencies]
pre-commit = "^3.7.0"
django-stubs = "^4.2.7"
{%- if cookiecutter.linter == 'Flake8' %}
isort = "^5.13.2"
black = "^24.3.0"
flake8 = "^7.0.0"
flake8-bandit = "^4.1.1"
flake8-broken-line = "^1.0.0"
flake8-comprehensions = "^3.14.0"
flake8-debugger = "^4.1.2"
flake8-docstrings = "^1.7.0"
flake8-eradicate = "^1.5.0"
flake8-isort = "^6.1.1"
flake8-quotes = "^3.4.0"
flake8-string-format = "^0.3.0"
flake8-pyproject = "^1.2.3"
flake8-bugbear = "^24.2.6"
flake8-rst-docstrings = "^0.3.0"
{%- endif %}
{%- if cookiecutter.linter == 'Ruff' %}
ruff = "^0.5.7"
mypy = "^1.9.0"
pylint = "^3.1.0"
pylint-django = "^2.5.4"
safety = "^3.1.0"
pytest-randomly = "^3.15.0"
faker = "^28.4.1"
factory-boy = "^3.3.1"

{%- if cookiecutter.linter == 'Flake8' %}
[tool.black]
line-length = 100
target-version = ['py312']
exclude = '''
(
  \.eggs
  |\.git
  |\.hg
  |\.mypy_cache
  |\.nox
  |\.tox
  |\.venv
  |_build
  |buck-out
  |build
  |dist
)
'''

[tool.isort]
line_length = 100
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
known_django = "django"
profile = "django"
src_paths = "app"
lines_after_imports = 2
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "**/admin.py",
    "**/admin/**",
    "**/tests/**",
    "**/migrations/**",
    "**/management/**",
    "**/urls.py",
    "**/__init__/**",
    "**/settings/**",
    "manage.py",
    "asgi.py",
    "wsgi.py",
]

[tool.mypy]
plugins = "mypy_django_plugin.main"

[tool.django-stubs]
django_settings_module = "app.settings.base"

{%- if cookiecutter.linter == 'Flake8' %}
[tool.flake8]
ignore = [
    "C812", # missing trailing comma
    "E701", # Multiple statements on one line (colon)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D401", # First line should be in imperative mood
    "N818", # exception name should be named with an Error suffix
    "P103", # other string does contain unindexed parameters
    "W291", # trailing whitespace
    "W503", # line break before binary operator
    "DAR101", # Missing parameter(s) in Docstring
    "DAR101", # Missing parameter(s) in Docstring
    "DAR201", # Missing "Returns" in Docstring
    "DAR401", # Missing exception(s) in Raises section
    "WPS110", # Found wrong variable name
    "WPS111", # Found too short name
    "WPS112", # Found private name pattern
    "WPS115", # Found upper-case constant in a class
    "WPS120", # Found regular name with trailing underscore
    "WPS121", # Found usage of a variable marked as unused
    "WPS122", # Found all unused variables definition
    "WPS226", # Found string literal over-use
    "WPS305", # Found `f` string
    "WPS306", # Found class without a base class
    "WPS237", # Found a too complex `f` string
    "WPS323", # Found `%` string formatting
    "WPS326", # Found implicit string concatenation
    "WPS329", # Found useless `except` case
    "WPS331", # Found variables that are only used for `return`:
    "WPS337", # Found multiline conditions
    "WPS338", # Found incorrect order of methods in a class
    "WPS347", # Found vague import that may cause confusion
    "WPS348", # Found a line that starts with a dot
    "WPS360", # Found an unnecessary use of a raw string
    "WPS404", # Found complex default value
    "WPS407", # Found mutable module constant
    "WPS412", # Found `__init__.py` module with logic
    "WPS420", # Found wrong keyword
    "WPS421", # Found wrong function call
    "WPS428", # Found statement that has no effect (for `...`)
    "WPS432", # Found magic number
    "WPS433", # Found nested import
    "WPS437", # Found protected attribute usage
    "WPS440", # Found block variables overlap
    "WPS441", # Found control variable used after block
    "WPS453", # Found executable mismatch: shebang is present but the file is not executable
    "WPS458", # Found imports collision
    "WPS529", # Found implicit `.get()` dict usage
    "WPS531", # Found simplifiable returning `if` condition in a function
    "WPS602", # Found using `@staticmethod`
    "WPS604", # Found incorrect node inside `class` body
    "WPS608", # Found incorrect `super()` call: remove arguments
    "WPS615", # Found unpythonic getter or sette
]
per-file-ignores = [
    "**/settings/*.py:S101",
    "**/settings/*.py:WPS425",
    "**/tests/*.py:S101",
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "**/tests/*",
    "**/migrations/*",
    "**/settings/*",
    "snapshots",
]
max-arguments = 12
max-imports = 20
max-import-from-members = 10
max-expressions = 12
max-methods = 10
max-local-variables = 16
max-module-members = 20
max-try-body-length = 10
max-cognitive-average = 10
max-cognitive-score = 30
max-annotation-complexity = 4
max-line-complexity = 15
max-complexity = 15
max-name-length = 60
max-line-length = 100
count = true
{%- endif %}

{%- if cookiecutter.linter == 'Ruff' %}
[tool.ruff]
src = ["{{cookiecutter.project_name}}"]
line-length = 99
unsafe-fixes = true
extend-exclude = [
    "docs/*",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812", # Trailing comma missing
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "N818", # Exception name should be named with Error suffix
    "PT004", # Deprecated error, will be removed in future release
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
    "S106", # Possible hardcoded password assigned to argument
]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 12
max-public-methods = 10
max-locals = 16

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
{%- endif %}
